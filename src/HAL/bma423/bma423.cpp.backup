#include "./XYWatch_hal.h"

BMA423 AccSensor;
static int16_t AccX, AccY, AccZ;
static uint32_t stepCount;

uint16_t readRegister(uint8_t address, uint8_t reg, uint8_t *data, uint16_t len)
{
    Wire.beginTransmission(address);
    Wire.write(reg);
    Wire.endTransmission();
    Wire.requestFrom((uint8_t)address, (uint8_t)len);
    uint8_t i = 0;
    while (Wire.available())
    {
        data[i++] = Wire.read();
    }
    return 0; //Pass
}

uint16_t writeRegister(uint8_t address, uint8_t reg, uint8_t *data, uint16_t len)
{
    Wire.beginTransmission(address);
    Wire.write(reg);
    Wire.write(data, len);
    return (0 != Wire.endTransmission());
}

void IRAM_ATTR isrStep()
{
    // TODO: read INT_STAT0,INT_STAT1,INT_STAT2
    // check which interrupt fired
}

void XYWatch::AccSensor_Init()
{

    Wire.begin(IICSDA, IICSCL);
  
}

bool XYWatch::CheckAccSensor()
{
}

void XYWatch::AccSensor_Updata(uint32_t millis, uint32_t time_ms)
{
    static uint32_t Millis;
    
    if (millis - Millis > time_ms)
    {
  

        Millis = millis;
    }
}

void XYWatch::AccSensor_OnStep(bool Step, bool Reset)
{

}

void XYWatch::AccSensor_Sleep(bool Acc, bool Step)
{

}

void XYWatch::AccSensor_GetStepValue(int32_t *val)
{
 
}

int16_t XYWatch::AccSensor_GetX() { return AccX; }
int16_t XYWatch::AccSensor_GetY() { return AccY; }
int16_t XYWatch::AccSensor_GetZ() { return AccZ; }

uint32_t XYWatch::AccSensor_GetStep() { return stepCount; }
